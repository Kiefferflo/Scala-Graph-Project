[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/cytech/scala-graph-project/src/test/scala/undirected/SimpleGraphSpec.scala","languageId":"scala","version":1,"text":"package undirected\n\nimport org.scalatest.flatspec.AnyFlatSpec\nimport org.scalatest.matchers.must.Matchers\nimport org.scalatestplus.scalacheck.ScalaCheckPropertyChecks.forAll\nimport org.scalacheck.Gen._\nimport org.scalacheck.Gen\n\n/** General template for test of [[SimpleGraph]] implementations\n  * @param companion the companion object of test class (see [[SimpleGraphSpecCompanion]] documentation)\n  */\nabstract class SimpleGraphSpec[V](companion : SimpleGraphSpecCompanion[V]) extends AnyFlatSpec with Matchers {\n    import companion._\n\n    /* QUERY METHODS */\n\n    behavior of s\"$name.neighborsOf\"\n      it must \"yield None if input is not an actual vertex of graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g neighborsOf v) mustBe None }\n      it must \"yield a subset of vertex set if input is an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g neighborsOf v) map { _ subsetOf g.vertices } must equal (Some(true)) }\n      it must \"yield a set of adjacent vertices\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g neighborsOf v).get forall { g.edges contains Edge(v, _) }}\n\n    /* VERTEX OPERATIONS */\n\n    behavior of s\"$name.+\"\n      it must \"contain input vertex\" in\n        forAll(zip(graph, vertex))     { case (g, v) => (g + v).vertices must equal (g.vertices + v) }\n      it must \"return input graph if input vertex is already in graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) =>  g + v           must equal   (g) }\n      it must \"have input vertex with degree 0 if not an actual vertex of graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g + v) degreeOf v mustBe Some(0) }\n\n    behavior of s\"$name.-\"\n      it must \"NOT contain input vertex\" in\n        forAll(zip(graph, vertex))     { case (g, v) => (g - v).vertices must equal (g.vertices - v) }\n      it must \"return input graph if input vertex is not already in graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) =>  g - v      must equal (g) }\n      it must \"have input vertex removed from neighbors if an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g neighborsOf v).get forall { n => !((g - v).neighborsOf(n).get contains v) } }\n      it must \"have degree updated for all neighbors if an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g neighborsOf v).get forall { n => (g - v).degreeOf(n) contains (g.degreeOf(n).get - 1) }}\n      it must \"revert back the + operator applied on an actual new vertex\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g + v) - v must equal (g) }\n\n    /* EDGE OPERATIONS */\n\n    behavior of s\"$name.+|\"\n      it must \"contain input edge\" in\n        forAll(zip(graph, edge))   { case (g, e) => (g +| e).edges must equal (g.edges + e) }\n      it must \"contain ends of input edge\" in\n        forAll(zip(graph, edge))   { case (g, e) => Set(e._1, e._2) subsetOf (g +| e).vertices mustBe true }\n      it must \"return input graph if input edge is already in graph\" in\n        forAll(graphAndActualEdge) { case (g, e) =>  g +| e         must equal   (g) }\n\n    behavior of s\"$name.-|\"\n      it must \"NOT contain input edge\" in\n        forAll(zip(graph, edge))     { case (g, e) => (g -| e).edges must equal (g.edges - e) }\n      it must \"return input graph if input edge is not already in graph\" in\n        forAll(graphAndNoActualEdge) { case (g, e) =>  g -| e        must equal (g) }\n      it must \"have ends removed from neighbors if an actual vertex of graph\" in\n        forAll(graphAndActualEdge)   { case (g, e) => (g -| e).neighborsOf(e._1) must not contain e._2 }\n      it must \"have degree updated for both ends if an actual vertex of graph\" in\n        forAll(graphAndActualEdge)   { case (g, e) => (g degreeOf e._1 map { _ - 1}, g degreeOf e._2 map { _ - 1}) must equal ((g -| e) degreeOf e._1, (g -| e) degreeOf e._2) }\n\n    behavior of s\"$name.withoutEdge\"\n      it must \"let vertex set unchanged\" in\n        forAll(graph) { g =>  g.withoutEdge.vertices must equal (g.vertices) }\n      it must \"have empty edge set\" in\n        forAll(graph) { g =>  g.withoutEdge.edges mustBe empty }\n      it must \"have empty neighbors for any vertex\" in\n        forAll(graph) { g => (g.withoutEdge.vertices forall { v => (g.withoutEdge neighborsOf v) == Some(Set.empty[V]) }) mustBe true }\n      it must \"have zero degree for any vertex\" in\n        forAll(graph) { g => (g.withoutEdge.vertices forall { v => (g.withoutEdge degreeOf v) == Some(0) }) mustBe true }\n  }\n\n/** General template for [[SimpleGraphSpec]] companion objects\n  * @param name name of actual implementation\n  * @tparam V type of vertex used for test\n  */\nabstract class SimpleGraphSpecCompanion[V](val name : String) {\n    /* BASIC GENERATORS */\n\n    /** The vertex generator */\n    val vertex : Gen[V]\n\n    /** The edge generator\n      * @param vertices set of vertices to pick from\n      *                 (if empty, generator [[vertex]] is used)\n      */\n    def edgeFrom(vertices : Set[V]) : Gen[Edge[V]] = {\n        val vertexGenerator = if (vertices.isEmpty) vertex else Gen.oneOf(vertices)\n        for (v1 <- vertexGenerator ; v2 <- vertexGenerator if v1 != v2) yield Edge(v1, v2)\n      }\n\n    /** The edge generator */\n    lazy val edge : Gen[Edge[V]] = edgeFrom(Set.empty[V])\n\n    /** The undirected simple graph generator\n      *\n      * If `g` is generated value, then it must be ensured that `g.vertices` is NOT empty.\n      */\n    val graph : Gen[SimpleGraph[V]] = graphWithAtLeast(1)\n\n    /** The general directed simple graph generator\n      *\n      * If `g` is generated value, then it must be ensured that `g.vertices` have at least `vertexMinCount` elements\n      *                                                     and `g.edges`    have at least   `edgeMinCount` elements\n      * @param vertexMinCount minimal number of vertices to use\n      * @param edgeMinCount   minimal number of edges to use\n      */\n    def graphWithAtLeast(vertexMinCount : Int, edgeMinCount : Int = 0) : Gen[SimpleGraph[V]]\n\n    /** A positive-valued valuation generator\n      * @param edges set of whose values must be defined\n      */\n    def positiveValuation(edges : Set[Edge[V]]) : Gen[Map[Edge[V], Double]] =\n      for (values <- Gen.containerOfN[Seq, Double](edges.size, posNum[Double])) yield (edges.toSeq zip (values map {_ + 1})).to(Map)\n\n  /* ADVANCED GENERATORS */\n\n    /** A generator for a graph and a vertex of the graph\n      *\n      * If `(g, v)` is a generated value, then it must be ensured that `g.vertices` contains `v`.\n      */\n    lazy val graphAndActualVertex : Gen[(SimpleGraph[V], V)] =\n      for (g <- graph ; v <- Gen.oneOf(g.vertices)) yield (g, v)\n\n    /** A generator for a graph and a vertex NOT in the graph\n      *\n      * If `(g, v)` is a generated value, then it must be ensured that `g.vertices` does not contain `v`.\n      */\n    lazy val graphAndNoActualVertex : Gen[(SimpleGraph[V], V)] =\n      for (g <- graph ; v <- vertex if !(g.vertices contains v)) yield (g, v)\n\n    /** A generator for a graph and an edge of the graph\n      *\n      * If `(g, e)` is a generated value, then it must be ensured that `g.edges`    contains `e`.\n      */\n    lazy val graphAndActualEdge : Gen[(SimpleGraph[V], Edge[V])] =\n      for (g <- graphWithAtLeast(2, 1) ; e <- Gen.oneOf(g.edges)) yield (g, e)\n\n    /** A generator for a graph and an edge NOT in the graph\n      *\n      * If `(g, e)` is a generated value, then it must be ensured that `g.edges` does not contain `e`.\n      */\n    lazy val graphAndNoActualEdge : Gen[(SimpleGraph[V], Edge[V])] =\n      for (g <- graph ; e <- edgeFrom(g.vertices) if !(g.edges contains e)) yield (g, e)\n\n    /** A generator for a graph and a positive valuation */\n    lazy val graphAndValuation : Gen[(SimpleGraph[V], Map[Edge[V], Double])] =\n      for (g <- graphWithAtLeast(2, 1) ; v <- positiveValuation(g.edges)) yield (g, v)\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/cytech/scala-graph-project/target/scala-2.13/zinc/inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Mar 21, 2022, 12:36:11 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
